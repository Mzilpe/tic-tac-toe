{"version":3,"sources":["components/UI/Card.module.css","components/UI/Button.module.css","logo.svg","components/Squares.js","components/Board.js","components/UI/Card.js","components/UI/Button.js","components/UI/GameOver.js","components/Game.js","components/Helpers/DataProvider.js","App.js","reportWebVitals.js","index.js"],"names":["module","exports","Square","value","onClick","style","className","Board","grid","map","square","index","Card","props","card","children","Button","button","Backdrop","onConfirm","Modal","title","message","GameOver","Fragment","ReactDOM","createPortal","document","getElementById","Game","useState","Array","fill","setGrid","stepNumber","setStepNumber","isXNext","setXNext","winner","squares","linesArray","i","length","a","b","c","checkWinner","XO","isGameOver","setIsGameOver","event","historyPoint","slice","current","console","log","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","render","StrictMode"],"mappings":"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","file":"static/js/main.dbc2025f.chunk.js","sourcesContent":["// extracted by mini-css-extract-plugin\nmodule.exports = {\"card\":\"Card_card__1D64W\"};","// extracted by mini-css-extract-plugin\nmodule.exports = {\"button\":\"Button_button__GDzc5\"};","export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from \"react\";\r\nimport \"./Squares.css\";\r\nconst Square = ({ value, onClick }) => {\r\n\tconst style = value ? `squares ${value}` : `squares`;\r\n\r\n\treturn (\r\n\t\t<button className={style} onClick={onClick}>\r\n\t\t\t{value}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Square;\r\n","import React from \"react\";\r\nimport Square from \"./Squares\";\r\n\r\nimport \"./Board.css\";\r\nconst Board = ({ grid, onClick }) => (\r\n\t<div className='board'>\r\n\t\t{grid.map((square, index) => (\r\n\t\t\t<Square key={index} value={square} onClick={() => onClick(index)} />\r\n\t\t))}\r\n\t</div>\r\n);\r\n\r\nexport default Board;\r\n","import React from 'react';\r\nimport style from './Card.module.css';\r\n\r\nconst Card = (props) => {\r\n  return (\r\n    <div className={`${style.card} ${props.className}`}>{props.children}</div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import React from \"react\";\r\nimport style from \"./Button.module.css\";\r\n\r\nconst Button = (props) => {\r\n\treturn (\r\n\t\t<button className={style.button} onClick={props.onClick}>\r\n\t\t\t{props.children}\r\n\t\t</button>\r\n\t);\r\n};\r\n\r\nexport default Button;\r\n","import React from \"react\";\r\nimport ReactDOM from \"react-dom\";\r\n\r\nimport \"./GameOver.css\";\r\nimport Card from \"./Card\";\r\nimport Button from \"./Button\";\r\n\r\nconst Backdrop = (props) => {\r\n\treturn <div className='backdrop' onClick={props.onConfirm}></div>;\r\n};\r\n\r\nconst Modal = (props) => {\r\n\treturn (\r\n\t\t<Card className='modal'>\r\n\t\t\t<header className='header'>\r\n\t\t\t\t<h2>{props.title}</h2>\r\n\t\t\t</header>\r\n\t\t\t<div className='content'>\r\n\t\t\t\t<p>{props.message}</p>\r\n\t\t\t</div>\r\n\t\t\t<footer className='actions'>\r\n\t\t\t\t<Button onClick={props.onConfirm}>Play Again</Button>\r\n\t\t\t</footer>\r\n\t\t</Card>\r\n\t);\r\n};\r\n\r\nconst GameOver = (props) => {\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{ReactDOM.createPortal(\r\n\t\t\t\t<Backdrop onConfirm={props.onConfirm} />,\r\n\t\t\t\tdocument.getElementById(\"backdrop-root\")\r\n\t\t\t)}\r\n\t\t\t{ReactDOM.createPortal(\r\n\t\t\t\t<Modal\r\n\t\t\t\t\ttitle={props.title}\r\n\t\t\t\t\tmessage={props.message}\r\n\t\t\t\t\tonConfirm={props.onConfirm}\r\n\t\t\t\t/>,\r\n\t\t\t\tdocument.getElementById(\"overlay-root\")\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default GameOver;\r\n","import React, { Fragment, useState } from \"react\";\r\nimport { checkWinner } from \"./Helpers/DataProvider\";\r\n\r\nimport \"./Game.css\";\r\nimport Board from \"./Board\";\r\nimport GameOver from \"./UI/GameOver\";\r\n\r\nconst Game = () => {\r\n\tconst [grid, setGrid] = useState([Array(9).fill(null)]);\r\n\tconst [stepNumber, setStepNumber] = useState(0);\r\n\tconst [isXNext, setXNext] = useState(true);\r\n\tconst winner = checkWinner(grid[stepNumber]);\r\n\tconst XO = isXNext ? \"X\" : \"O\";\r\n\tconst [isGameOver, setIsGameOver] = useState(false);\r\n\r\n\tconst handleClick = (event) => {\r\n\t\tconst historyPoint = grid.slice(0, stepNumber + 1);\r\n\t\tconst current = historyPoint[stepNumber];\r\n\t\tconst squares = [...current];\r\n\t\t// \tCheck if winner\r\n\t\tif (winner || squares[event]) {\r\n\t\t\treturn;\r\n\t\t}\r\n\r\n\t\tsquares[event] = XO;\r\n\t\tsetGrid([...historyPoint, squares]);\r\n\t\tsetStepNumber(historyPoint.length);\r\n\t\tsetXNext(!isXNext);\r\n\t\tif (historyPoint.length === 9) {\r\n\t\t\tconsole.log(\"check\");\r\n\t\t\tsetIsGameOver(true);\r\n\t\t}\r\n\t};\r\n\r\n\tconst startNewGame = () => {\r\n\t\tsetGrid([Array(9).fill(null)]);\r\n\t\tsetStepNumber(0);\r\n\t\tsetXNext(true);\r\n\t};\r\n\r\n\tconst gameOverHandler = () => {\r\n\t\tsetIsGameOver(false);\r\n\t\tsetGrid([Array(9).fill(null)]);\r\n\t\tsetStepNumber(0);\r\n\t\tsetXNext(true);\r\n\t};\r\n\r\n\treturn (\r\n\t\t<React.Fragment>\r\n\t\t\t{winner && (\r\n\t\t\t\t<div className='winner-container'>\r\n\t\t\t\t\t<h3>Congratulations...</h3>\r\n\t\t\t\t\t<h1 className='winner-h'>{winner}</h1>\r\n\t\t\t\t\t<h2> You WON...</h2>\r\n\t\t\t\t\t<button className='btn-play' onClick={startNewGame}>\r\n\t\t\t\t\t\tPlay Again\r\n\t\t\t\t\t</button>\r\n\t\t\t\t</div>\r\n\t\t\t)}\r\n\t\t\t{isGameOver && (\r\n\t\t\t\t<GameOver\r\n\t\t\t\t\ttitle='Game Over'\r\n\t\t\t\t\tmessage='It was nice Game !'\r\n\t\t\t\t\tonConfirm={gameOverHandler}\r\n\t\t\t\t/>\r\n\t\t\t)}\r\n\t\t\t{!winner && (\r\n\t\t\t\t<Fragment>\r\n\t\t\t\t\t<h1>Tic Tac Toe</h1>\r\n\t\t\t\t\t<Board grid={grid[stepNumber]} onClick={handleClick} />\r\n\t\t\t\t</Fragment>\r\n\t\t\t)}\r\n\t\t</React.Fragment>\r\n\t);\r\n};\r\n\r\nexport default Game;\r\n","export function checkWinner(squares) {\r\n\tconst linesArray = [\r\n\t\t[0, 1, 2],\r\n\t\t[3, 4, 5],\r\n\t\t[6, 7, 8],\r\n\t\t[0, 3, 6],\r\n\t\t[1, 4, 7],\r\n\t\t[2, 5, 8],\r\n\t\t[0, 4, 8],\r\n\t\t[2, 4, 6],\r\n\t];\r\n\tfor (let i = 0; i < linesArray.length; i++) {\r\n\t\tconst [a, b, c] = linesArray[i];\r\n\t\tif (squares[a] && squares[a] === squares[b] && squares[a] === squares[c]) {\r\n\t\t\treturn squares[a];\r\n\t\t}\r\n\t}\r\n\treturn null;\r\n}\r\n","import logo from \"./logo.svg\";\nimport \"./App.css\";\nimport React from \"react\";\nimport Game from \"./components/Game\";\nimport Square from \"./components/Squares\";\n\nfunction App() {\n\treturn (\n\t\t<React.Fragment>\n\t\t\t<Game />\n\t\t</React.Fragment>\n\t);\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}